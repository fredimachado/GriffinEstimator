@page "/join/{SessionId}"
@using GriffinEstimator.Shared;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@inject BrowserStorage Storage
@inject HttpClient Http
@implements IAsyncDisposable

<PageTitle>Griffin Estimator - Planning Poker</PageTitle>

@if (!joined)
{
    <h1>Time to estimate!</h1>
    <div>
        <div class="col-3 mb-3">
            <label for="inputName" class="form-label">Name</label>
            <input type="text" class="form-control" id="inputName" @bind="name">
        </div>
        <button type="button" class="btn btn-primary btn-lg" @onclick="JoinSession">Join</button>
    </div>
}
else
{
    <h1>Welcome @name!</h1>
    <div>
        @if (estimating && !estimationSent)
        {
            var sequence = new[] { 0, 1, 2, 3, 5, 8, 13, 21 };
            <div class="hand">

                <ul class="cards-container">


                    @for (int i = 0; i < sequence.Length; i++)
                    {
                        var number = sequence[i];
                        var pct = 100 - (8 * i);
                        <li class="poker-card-container" style="right: calc(@(pct)% - 10em)" @onclick="() => SetPoints(number)">
                            <div class="poker-card">
                                <div>
                                    <h3 class="h5 m-2">@number</h3>
                                </div>
                                <div class="text-center">
                                    <h3 class="h1 mt-4">@number</h3>
                                </div>
                            </div>
                        </li>
                    }
        
                </ul>

                <div class="form-group submit-box">
                    <button type="button" disabled="@isDisabled" class="btn btn-primary btn-lg" @onclick="SubmitEstimate">Submit</button>
                    @if (!isDisabled)
                    {
                        <h4>Selected card: @points</h4>
                    }
                </div>
        
            </div>
        }
        else if (estimating && estimationSent)
        {
            <div class="alert alert-success" role="alert">
                Waiting for the round to end...
            </div>
        }
        else if (!estimating && result != null)
        {
            <ResultsTable Result="result" ShowPoints="true" />
        }
        else
        {
            <div class="alert alert-secondary" role="alert">
                Waiting for the round to start...
            </div>
        }
    </div>
}

@code {
    private HubConnection hubConnection;

    private bool joined;
    private string name;

    private bool estimating;
    private string points;
    private bool isDisabled;
    private EstimationResult result;
    private bool estimationSent;

    [Parameter]
    public string SessionId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var nameFromStorage = await Storage.GetAsync<string>("Name");
            if (!string.IsNullOrWhiteSpace(nameFromStorage))
            {
                name = nameFromStorage;
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void SetPoints(int points)
    {
        this.points = points.ToString();
        isDisabled = false;
    }

    private async Task JoinSession()
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return;
        }

        var response = await Http.PostAsJsonAsync("api/session/join", new { SessionId, MemberName = name });
        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
            return;
        }

        await JoinPokerSessionHub();
    }

    private async Task JoinPokerSessionHub()
    {
        if (hubConnection != null && hubConnection.State != HubConnectionState.Disconnected)
        {
            return;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pokerSessionHub"))
            .WithAutomaticReconnect(new RetryForeverPolicy())
            .Build();

        hubConnection.On("RoundStarted", () =>
        {
            this.result = null;
            estimationSent = false;
            estimating = true;
            isDisabled = true;
            StateHasChanged();
        });

        hubConnection.On("RoundEnded", (EstimationResult result) =>
        {
            points = null;
            estimating = false;
            this.result = result;
            StateHasChanged();
        });

        hubConnection.Closed += (exception) =>
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
            return Task.CompletedTask;
        };

        await hubConnection.StartAsync();

        var sessionId = await hubConnection.InvokeAsync<string>("JoinSession", SessionId, name);

        joined = true;
        StateHasChanged();

        await Storage.SetAsync("Name", name);
    }

    private async Task SubmitEstimate()
    {
        estimationSent = true;
        await hubConnection.SendAsync("SubmitEstimate", SessionId, name, Convert.ToInt32(points));
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
