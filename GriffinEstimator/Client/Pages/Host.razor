@page "/host"
@using GriffinEstimator.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Estimator</PageTitle>

@if (hubConnection.State != HubConnectionState.Connected)
{
    <h1>Connecting...</h1>
}
else if (hubConnection.State == HubConnectionState.Connected && string.IsNullOrWhiteSpace(sessionId))
{
    <h1>Creating Session...</h1>
}
else if (hubConnection.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(sessionId))
{
    <div>Session link: @NavigationManager.ToAbsoluteUri($"/join/{sessionId}")</div>
    <div>
        @if (estimating)
        {
            <ResultsTable Result="result" ShowPoints="false" />
            <button type="button" class="btn btn-primary btn-lg mt-3" @onclick="EndRound">End Round</button>
            <button type="button" class="btn btn-danger btn-lg mt-3" @onclick="RestartRound">Restart Round</button>
        }
        else if (!estimating)
        {
            <ResultsTable Result="result" ShowPoints="true" />
            <button type="button" class="btn btn-primary btn-lg mt-3" @onclick="StartRound">Start Round</button>
        }
    </div>
}

@code {
    private HubConnection hubConnection;

    private string sessionId;
    private bool estimating;
    private EstimationResult result = new EstimationResult(new());

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pokerSessionHub"))
            .WithAutomaticReconnect(new RetryForeverPolicy())
            .Build();

        hubConnection.On("MemberJoined", (string name) =>
        {
            result.Estimates.Add(new MemberEstimate(name));
            StateHasChanged();
        });

        hubConnection.On("RoundStarted", () =>
        {
            estimating = true;
            StateHasChanged();
        });

        hubConnection.On("RoundEnded", (EstimationResult result) =>
        {
            this.result = result;
            estimating = false;
            StateHasChanged();
        });

        hubConnection.On("EstimateSubmitted", (string name) =>
        {
            var member = result.Estimates.FirstOrDefault(x => x.MemberName == name);
            if (member is not null)
            {
                member.Points = "Ok";
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        sessionId = await hubConnection.InvokeAsync<string>("StartSession");
    }

    private async Task StartRound()
    {
        if (result != null && result.Estimates.Any())
        {
            result.Estimates.ForEach(x => x.Points = null);
        }
        StateHasChanged();
        await hubConnection.SendAsync("StartRound", sessionId);
    }

    private async Task RestartRound()
    {
        await StartRound();
    }

    private async Task EndRound()
    {
        await hubConnection.SendAsync("EndRound", sessionId);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
